import ast

def calculate_cyclomatic_complexity(func_ast):
    complexity = 1
    
    for node in ast.walk(func_ast):
        if isinstance(node, ast.If) or isinstance(node, ast.While) or isinstance(node, ast.For):
            complexity += 1
        elif isinstance(node, ast.Try) or isinstance(node, ast.ExceptHandler):
            complexity += 1
        elif isinstance(node, ast.With):
            complexity += 1
        elif isinstance(node, ast.AsyncWith):
            complexity += 1
        elif isinstance(node, ast.FunctionDef) or isinstance(node, ast.AsyncFunctionDef):
            continue
    
    return complexity

def extract_function(ast_tree, func_name):
    for node in ast_tree.body:
        if isinstance(node, ast.FunctionDef) and node.name == func_name:
            return node
    return None

# Read the Python file
file_path = 'to_test2.py'
with open(file_path, 'r') as file:
    code = file.read()
parsed_ast = ast.parse(code)

for node in parsed_ast.body:
    if isinstance(node, ast.FunctionDef):
        target_function_name = node.name 
        target_function_ast = extract_function(parsed_ast, target_function_name)

        if target_function_ast:
            complexity = calculate_cyclomatic_complexity(target_function_ast)
            print(f"'{target_function_name}': {complexity}")
        else:
            print(f"Function '{target_function_name}' not found in the code.")
